@startuml
start
:进入new app(BaseApp的继承);
note left:DexApp
:设置BaseApp中的ProtocolVersion;
note right:x/version/version.go中的const ProtocolVersion,\n通过改写来选择运行的protocol的版本号
:将app的postEndBlocker函数反钩进BaseApp;
note left:postEndBlocker会在BaseApp的EndBlock中最后执行,\n专门用来为upgrade提供服务\n(具体流程见文件upgrade_post_end_blocker.puml)
:创建protocolKeeper,其StoreKey为MainKey;
note right:该StoreKey后面会被赋给BaseApp中的baseKey字段,\n用于从Store中恢复状态
:创建protolEngine;
note right:将protocolKeeper塞进去
:mount所有module需要用到的StoreKey;
note left:包括KVStoreKeys和TransientStoreKeys
:创建protocol的实体对象，并添加进engine;
note right:如果用protocolv0,创建的时候的version实参要对应设置成0
:将前面分配各module所需StoreKey结果持久化;\n将MainKey赋值给BaseApp并从中读取共识参数赋给BaseApp中的consensusParams字段;\n创建新的cacheMultiStore来设置新的checkState,并赋给BaseApp中的checkState字段;
:从MainStore中获得最近的版本号;
note left:key:proto.currentVersionKey\n如果Store中没有记录，则返回0\n(在upgrade成功后,会有对这个KV进行set的操作)
if (根据所获得的版本号在engine中查找对应的Protocol对象) then(找不到)
:os.Exit;
detach
else(能找到)
:载入该protocol的设置:\nCodec/各Keeper/各Router/各Params/AnteHandler\n以及该protocol中InitChainer/BeginBlocker/EndBlocker\n等钩子函数反钩进BaseApp;
endif
:用当前protocol使用的Codec设置BaseApp中的txDecoder;
note right:这个用于Tx(StdTx)的解码工作
:使能perf;
:return app;
stop
@enduml