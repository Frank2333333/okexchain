@startuml

hide empty members
class "func EndBlocker" as M1 << (M,orchid) >>

class ProtocolV0{
    parent  Parent
    version uint64
    cdc     *codec.Codec
    logger  log.Logger
    protocolKeeper
    	accountKeeper
    	bankKeeper
    	feeCollectionKeeper
    	paramsKeeper
    	orderKeeper
    	backendKeeper
    	tokenKeeper
    	distrKeeper
    	stakingKeeper
    	slashingKeeper
    	govKeeper
    	upgradeKeeper
    	epochKeeper

    	*stream.StreamEngine

    	stopped bool

    	sdk.AnteHandler

    	baseapp.Router
    	baseapp.QueryRouter
    ~EndBlocker(...) ...
    ~Load()
}


class "func (*ProtocolV0) EndBlocker" as M2 << (M,orchid) >>

interface Parent {
DeliverTx(...) ...
PushInitChainer(...)
PushBeginBlocker(...)
PushEndBlocker(...)
PushAnteHandler(...)
SetRouter(...)
}
note top:将提供出的新BeginBlocker/EndBlocker/InitChainer/\nAnteHandler/TxDecoder/Router/QueryRouter按到\nBaseApp对应的成员变量上

class BaseApp{
...
	cms sdk.CommitMultiStore
	router Router
	queryRouter QueryRouter
	txDecoder sdk.TxDecoder
	baseKey *sdk.KVStoreKey
	anteHandler sdk.AnteHandler
	initChainer sdk.InitChainer
	beginBlocker sdk.BeginBlocker
	endBlocker sdk.EndBlocker
	...
	~MountStores(...)
}

class "func (*ProtocolV0) Load" as M3 << (M,orchid) >>
note top:该方法将ProtocolV0中的cdc/各种Keeper/Router相关/\nParams/anteHandler全部赋值，并将ProtocolV0定义的\n类方法InitChainer/BeginBlocker/EndBlocke更新到\nBaseApp上\n该方法可以认为是软件升级的本质过程！

interface Protocol {
	GetVersion()
	ExportAppStateAndValidators()
	GetKVStoreKeyList()
	Load()
	Init()
	GetCodec()
	CheckStopped()
	GetBackendKeeper()
	GetStreamEngine()
	GetAccountKeeper()
	GetStakingKeeper()
	GetTokenKeeper()
}

class AppProtocolEngine{
    protocols      map[uint64]Protocol
    current        uint64
    next           uint64
    keeper         proto.VersionKeeper
}

class "func (*AppProtocolEngine)\nLoadCurrentProtocol" as M4 << (M,orchid) >>
note top:在创建OkchainApp对象时会被调用
class "func (*AppProtocolEngine)\nGetKVStoreKeys" as M5 << (M,orchid) >>

class "func (*BaseApp)\nMountStores" as M6 << (M,orchid) >>
class "func (*AppProtocolEngine)Add\n(Protocol)" as M7 << (M,orchid) >>

class "func (*BaseApp)\nLoadLatestVersion\n(*sdk.KVStoreKey)" as M8 << (M,orchid) >>



Parent <|-- BaseApp:实现
M2 <--* ProtocolV0:按顺序调用所有模块的EndBlocker()\n将他们的执行后的tags append到一起\n然后拼装成abci.ResponseEndBlock返回
M3 <--* ProtocolV0
Protocol <|-- ProtocolV0:实现
M1 <-- M2:调用
M3 <--* Protocol
Parent <--* ProtocolV0:实现
BaseApp <--* ProtocolV0:可以认为Protocol\n包含着BaseApp

M4 <--* AppProtocolEngine:从cms中找到当前的version号\n然后从protocols中找到对应\nProtocol对象。最后调用Load\n进行升级
M5 <--* AppProtocolEngine:\n设置x/modules中所有\n能用到的KVStoreKey
M3 <-- M4:调用
M6 <--* BaseApp:将传入的sdk.StoreKey\n挂载到cms上（DB）
M6 <.. M5:配合使用\nProtolcolEngine\n来管理BaseApp
M7 <--* AppProtocolEngine:添加新版本的Protocol对象\n进map来管理
ProtocolV0 <-- M7

M8 <--* BaseApp:从本地cms中恢复之前版本的状态\n正在运行的新BaseApp对象中

@enduml