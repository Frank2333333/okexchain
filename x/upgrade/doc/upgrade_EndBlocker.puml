@startuml
start
:在abci.EndBlock的最后进行upgrade检查;
if (MainKey对应的store中是否能找到AppUpgradeConfig信息：\n利用protoKeeper找key——upgradeConfigKey\n(将要升级的配置信息)) then (no)
:说明当前并没有升级提案通过;
else (yes)
if (用当前Header中的ProposerAddress转成ConsAddress(公钥)，\n去staking的KVStore中是否能找到对应的validator) then(no)
:panic;
detach
else (yes)
if (当前Header中的Version.App == upgradeConfig.ProtocolDef.Version\n(将要升级到的配置信息版本号)) then(no)
:从upgrade的KVStore中删除KV\nkey:upgradeConfig.ProtocolDef.Version\n(将要升级到的版本号)\nvalue:当前出块validator的共识地址;
if (上面的键值对是否已经存在于KVStore中) then(no)
:该(当前区块出块的)validator跑的是老版本;
else (yes)
:该(当前区块出块的)validator在之前出块的时候跑的\n是新版本，但是这次出块跑的是老版本;
endif
else(yes)
:写Signal:\nKV写入upgrade的KVStore\nkey:upgradeConfig.ProtocolDef.Version\n(将要升级到的版本号)\nvalue:当前出块validator的共识地址;
:说明当前的出块的validator已经升级到了新版本;
endif
if (本区块高度是否比升级区块高读小1) then(no)
else (yes)
if (看vote power排在前n的validators中,共识地址出现在upgrade的KVStore中的validator\n的vote power之和除以这n个validators的vote power总和的商是否大于等于upgradeConfig.ProtocolDef\n中设置的阈值Threshold) then(no)
:本次升级失败(因为升级的validator的vote power之和尚未达到阈值要求);
:在KeyMain的KVStore中，利用protocolKeeper写入当前版本号\nkey:currentVersionKey\nvalue:upgradeConfig.ProtocolDef.Version;
else (yes)
:本次升级成功(因为升级的validator的vote power之和已经达到阈值要求);
:在KeyMain的KVStore中，利用protocolKeeper写入当前版本号\nkey:lastFailedVersionKey\nvalue:upgradeConfig.ProtocolDef.Version;
endif
:将本次升级的结果写入upgrade的KVStore中\nkey:upgradeConfig(AppUpgradeConfig)\nvalue:是否成功(bool);
:清空upgrade的KVStore中的与本次升级相关的Signal\n即删除所有upgradeConfig.ProtocolDef.Version为k\ney前缀的KV对;
:清空MainKey中存储的升级配置，即\n删除Main Store中key为upgradeConfigKey的KV对;
endif
endif
endif
:添加tags:\nkey:"app_version"\nvalue:利用protoKeeper从upgrade的KVStore中找key——currentVersionKey;
:结束本次abci.EndBlock;
note right:upgrade的EndBlocker会在BaseApp的endBlocker最后一个被执行，\n并且BaseApp的endBlocker执行完后会执行BaseApp的postEndBlocker\n(postEndBlocker的具体流程见文件upgrade_postEndBlocker.puml)
stop

@enduml