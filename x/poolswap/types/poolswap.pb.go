// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/poolswap.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddLiquidity struct {
	MinLiquidity  github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,1,opt,name=min_liquidity,json=minLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_liquidity"`
	MaxBaseAmount types.DecCoin                                 `protobuf:"bytes,2,opt,name=max_base_amount,json=maxBaseAmount,proto3" json:"max_base_amount"`
	QuoteAmount   types.DecCoin                                 `protobuf:"bytes,3,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount"`
	Deadline      int64                                         `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Sender        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
}

func (m *MsgAddLiquidity) Reset()         { *m = MsgAddLiquidity{} }
func (m *MsgAddLiquidity) String() string { return proto.CompactTextString(m) }
func (*MsgAddLiquidity) ProtoMessage()    {}
func (*MsgAddLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_1275bc8058481366, []int{0}
}
func (m *MsgAddLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLiquidity.Merge(m, src)
}
func (m *MsgAddLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLiquidity proto.InternalMessageInfo

func (m *MsgAddLiquidity) GetMaxBaseAmount() types.DecCoin {
	if m != nil {
		return m.MaxBaseAmount
	}
	return types.DecCoin{}
}

func (m *MsgAddLiquidity) GetQuoteAmount() types.DecCoin {
	if m != nil {
		return m.QuoteAmount
	}
	return types.DecCoin{}
}

func (m *MsgAddLiquidity) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *MsgAddLiquidity) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

type MsgRemoveLiquidity struct {
	Liquidity      github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,1,opt,name=liquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidity"`
	MinBaseAmount  types.DecCoin                                 `protobuf:"bytes,2,opt,name=min_base_amount,json=minBaseAmount,proto3" json:"min_base_amount"`
	MinQuoteAmount types.DecCoin                                 `protobuf:"bytes,3,opt,name=min_quote_amount,json=minQuoteAmount,proto3" json:"min_quote_amount"`
	Deadline       int64                                         `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Sender         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
}

func (m *MsgRemoveLiquidity) Reset()         { *m = MsgRemoveLiquidity{} }
func (m *MsgRemoveLiquidity) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveLiquidity) ProtoMessage()    {}
func (*MsgRemoveLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_1275bc8058481366, []int{1}
}
func (m *MsgRemoveLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveLiquidity.Merge(m, src)
}
func (m *MsgRemoveLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveLiquidity proto.InternalMessageInfo

func (m *MsgRemoveLiquidity) GetMinBaseAmount() types.DecCoin {
	if m != nil {
		return m.MinBaseAmount
	}
	return types.DecCoin{}
}

func (m *MsgRemoveLiquidity) GetMinQuoteAmount() types.DecCoin {
	if m != nil {
		return m.MinQuoteAmount
	}
	return types.DecCoin{}
}

func (m *MsgRemoveLiquidity) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *MsgRemoveLiquidity) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

type MsgCreateExchange struct {
	Token  string                                        `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Sender github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
}

func (m *MsgCreateExchange) Reset()         { *m = MsgCreateExchange{} }
func (m *MsgCreateExchange) String() string { return proto.CompactTextString(m) }
func (*MsgCreateExchange) ProtoMessage()    {}
func (*MsgCreateExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_1275bc8058481366, []int{2}
}
func (m *MsgCreateExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateExchange.Merge(m, src)
}
func (m *MsgCreateExchange) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateExchange.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateExchange proto.InternalMessageInfo

func (m *MsgCreateExchange) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *MsgCreateExchange) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

type MsgTokenToNativeToken struct {
	SoldTokenAmount      types.DecCoin                                 `protobuf:"bytes,1,opt,name=sold_token_amount,json=soldTokenAmount,proto3" json:"sold_token_amount"`
	MinBoughtTokenAmount types.DecCoin                                 `protobuf:"bytes,2,opt,name=min_bought_token_amount,json=minBoughtTokenAmount,proto3" json:"min_bought_token_amount"`
	Deadline             int64                                         `protobuf:"varint,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Recipient            github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=recipient,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"recipient,omitempty"`
	Sender               github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
}

func (m *MsgTokenToNativeToken) Reset()         { *m = MsgTokenToNativeToken{} }
func (m *MsgTokenToNativeToken) String() string { return proto.CompactTextString(m) }
func (*MsgTokenToNativeToken) ProtoMessage()    {}
func (*MsgTokenToNativeToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_1275bc8058481366, []int{3}
}
func (m *MsgTokenToNativeToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenToNativeToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenToNativeToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenToNativeToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenToNativeToken.Merge(m, src)
}
func (m *MsgTokenToNativeToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenToNativeToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenToNativeToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenToNativeToken proto.InternalMessageInfo

func (m *MsgTokenToNativeToken) GetSoldTokenAmount() types.DecCoin {
	if m != nil {
		return m.SoldTokenAmount
	}
	return types.DecCoin{}
}

func (m *MsgTokenToNativeToken) GetMinBoughtTokenAmount() types.DecCoin {
	if m != nil {
		return m.MinBoughtTokenAmount
	}
	return types.DecCoin{}
}

func (m *MsgTokenToNativeToken) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *MsgTokenToNativeToken) GetRecipient() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *MsgTokenToNativeToken) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgAddLiquidity)(nil), "okchain.poolswap.MsgAddLiquidity")
	proto.RegisterType((*MsgRemoveLiquidity)(nil), "okchain.poolswap.MsgRemoveLiquidity")
	proto.RegisterType((*MsgCreateExchange)(nil), "okchain.poolswap.MsgCreateExchange")
	proto.RegisterType((*MsgTokenToNativeToken)(nil), "okchain.poolswap.MsgTokenToNativeToken")
}

func init() { proto.RegisterFile("types/poolswap.proto", fileDescriptor_1275bc8058481366) }

var fileDescriptor_1275bc8058481366 = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0x41, 0x6f, 0x12, 0x41,
	0x14, 0xc7, 0x19, 0xa0, 0x8d, 0x4c, 0xa9, 0xb4, 0x2b, 0x46, 0xe4, 0xb0, 0x90, 0x1e, 0x0c, 0x97,
	0xee, 0x46, 0xbd, 0x18, 0x13, 0x63, 0xd8, 0xd6, 0x83, 0x09, 0x68, 0x5c, 0x7b, 0xf2, 0x42, 0x86,
	0x9d, 0x97, 0x65, 0x02, 0x3b, 0x43, 0x99, 0xd9, 0xba, 0xf5, 0x53, 0xf8, 0x11, 0xfc, 0x38, 0x3d,
	0x98, 0xd8, 0xa3, 0xf1, 0x40, 0x0c, 0x24, 0xc6, 0xcf, 0xe0, 0xc9, 0xec, 0xec, 0x02, 0x8b, 0x07,
	0x52, 0xb5, 0x49, 0x6f, 0xfb, 0x66, 0xde, 0xff, 0xff, 0x76, 0x7e, 0xff, 0xe4, 0xe1, 0xaa, 0x3a,
	0x1f, 0x83, 0xb4, 0xc7, 0x42, 0x8c, 0xe4, 0x7b, 0x32, 0xb6, 0xc6, 0x13, 0xa1, 0x84, 0xb1, 0x27,
	0x86, 0xde, 0x80, 0x30, 0x6e, 0x2d, 0xce, 0xeb, 0x55, 0x5f, 0xf8, 0x42, 0x5f, 0xda, 0xf1, 0x57,
	0xd2, 0x57, 0xbf, 0xef, 0x09, 0x19, 0x08, 0xd9, 0x4b, 0x2e, 0x92, 0x22, 0xbd, 0xba, 0x93, 0x54,
	0x6b, 0x87, 0x07, 0x9f, 0xf3, 0xb8, 0xd2, 0x95, 0x7e, 0x9b, 0xd2, 0x0e, 0x3b, 0x0d, 0x19, 0x65,
	0xea, 0xdc, 0x78, 0x8b, 0x77, 0x03, 0xc6, 0x7b, 0xa3, 0xc5, 0x41, 0x0d, 0x35, 0x51, 0xab, 0xe4,
	0x58, 0x17, 0xd3, 0x46, 0xee, 0xdb, 0xb4, 0xf1, 0xc0, 0x67, 0x6a, 0x10, 0xf6, 0x2d, 0x4f, 0x04,
	0xf6, 0x9a, 0xe5, 0xa1, 0xa4, 0x43, 0x5b, 0xff, 0xbd, 0x75, 0x0c, 0x9e, 0x5b, 0x0e, 0x18, 0x5f,
	0x99, 0x3e, 0xc3, 0x95, 0x80, 0x44, 0xbd, 0x3e, 0x91, 0xd0, 0x23, 0x81, 0x08, 0xb9, 0xaa, 0xe5,
	0x9b, 0xa8, 0xb5, 0xf3, 0xa8, 0x62, 0xa5, 0x3f, 0x74, 0x0c, 0xde, 0x91, 0x60, 0xdc, 0x29, 0xc6,
	0x73, 0xdc, 0xdd, 0x80, 0x44, 0x0e, 0x91, 0xd0, 0xd6, 0xbd, 0xc6, 0x13, 0x5c, 0x3e, 0x0d, 0x85,
	0x5a, 0x6a, 0x0b, 0x9b, 0xb4, 0x3b, 0xba, 0x35, 0x55, 0xd6, 0xf1, 0x2d, 0x0a, 0x84, 0x8e, 0x18,
	0x87, 0x5a, 0xb1, 0x89, 0x5a, 0x05, 0x77, 0x59, 0x1b, 0x2f, 0xf1, 0xb6, 0x04, 0x4e, 0x61, 0x52,
	0xdb, 0x6a, 0xa2, 0x56, 0xd9, 0x79, 0xf8, 0x6b, 0xda, 0x38, 0xbc, 0xc2, 0xf3, 0xda, 0x9e, 0xd7,
	0xa6, 0x74, 0x02, 0x52, 0xba, 0xa9, 0xc1, 0xd3, 0xe2, 0xcf, 0x4f, 0x0d, 0x74, 0xf0, 0x25, 0x8f,
	0x8d, 0xae, 0xf4, 0x5d, 0x08, 0xc4, 0x19, 0xac, 0x1e, 0xdf, 0xc1, 0xa5, 0xff, 0xa5, 0xb9, 0x32,
	0xd0, 0x28, 0x19, 0xff, 0x1b, 0x94, 0x8c, 0x67, 0x50, 0x3e, 0xc7, 0x7b, 0xb1, 0xfc, 0xea, 0x38,
	0x6f, 0x07, 0x8c, 0xbf, 0xb9, 0x29, 0xa2, 0x1f, 0xf0, 0x7e, 0x57, 0xfa, 0x47, 0x13, 0x20, 0x0a,
	0x5e, 0x44, 0xde, 0x80, 0x70, 0x1f, 0x8c, 0x2a, 0xde, 0x52, 0x62, 0x08, 0x3c, 0x61, 0xe9, 0x26,
	0x45, 0x66, 0x76, 0xfe, 0x7a, 0x66, 0xff, 0xc8, 0xe3, 0xbb, 0x5d, 0xe9, 0x9f, 0xc4, 0xee, 0x27,
	0xe2, 0x15, 0x51, 0xec, 0x0c, 0x74, 0x61, 0xb4, 0xf1, 0xbe, 0x14, 0x23, 0xda, 0xd3, 0x83, 0x17,
	0x10, 0xd1, 0x26, 0x88, 0x95, 0xb8, 0x5f, 0x8b, 0x53, 0x8a, 0x1d, 0x7c, 0x4f, 0xa7, 0x28, 0x42,
	0x7f, 0xa0, 0xd6, 0x8d, 0x36, 0xa6, 0x59, 0x8d, 0xd3, 0xd4, 0xa2, 0xac, 0x5b, 0x36, 0x93, 0xc2,
	0x1f, 0x99, 0xbc, 0xc6, 0xa5, 0x09, 0x78, 0x6c, 0xcc, 0x80, 0x2b, 0x1d, 0xd8, 0x3f, 0xa1, 0x59,
	0x79, 0x5c, 0x7b, 0xc8, 0x8e, 0x73, 0x31, 0x33, 0xd1, 0xe5, 0xcc, 0x44, 0xdf, 0x67, 0x26, 0xfa,
	0x38, 0x37, 0x73, 0x97, 0x73, 0x33, 0xf7, 0x75, 0x6e, 0xe6, 0xde, 0xb5, 0x32, 0xb6, 0x62, 0x08,
	0x91, 0x9d, 0xee, 0x41, 0x3b, 0x5a, 0x6e, 0xc8, 0xc4, 0xbc, 0xbf, 0xad, 0x17, 0xda, 0xe3, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xd4, 0x69, 0x59, 0x40, 0x05, 0x00, 0x00,
}

func (this *MsgAddLiquidity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgAddLiquidity)
	if !ok {
		that2, ok := that.(MsgAddLiquidity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MinLiquidity.Equal(that1.MinLiquidity) {
		return false
	}
	if !this.MaxBaseAmount.Equal(&that1.MaxBaseAmount) {
		return false
	}
	if !this.QuoteAmount.Equal(&that1.QuoteAmount) {
		return false
	}
	if this.Deadline != that1.Deadline {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	return true
}
func (this *MsgRemoveLiquidity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRemoveLiquidity)
	if !ok {
		that2, ok := that.(MsgRemoveLiquidity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Liquidity.Equal(that1.Liquidity) {
		return false
	}
	if !this.MinBaseAmount.Equal(&that1.MinBaseAmount) {
		return false
	}
	if !this.MinQuoteAmount.Equal(&that1.MinQuoteAmount) {
		return false
	}
	if this.Deadline != that1.Deadline {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	return true
}
func (this *MsgCreateExchange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgCreateExchange)
	if !ok {
		that2, ok := that.(MsgCreateExchange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	return true
}
func (this *MsgTokenToNativeToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgTokenToNativeToken)
	if !ok {
		that2, ok := that.(MsgTokenToNativeToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SoldTokenAmount.Equal(&that1.SoldTokenAmount) {
		return false
	}
	if !this.MinBoughtTokenAmount.Equal(&that1.MinBoughtTokenAmount) {
		return false
	}
	if this.Deadline != that1.Deadline {
		return false
	}
	if !bytes.Equal(this.Recipient, that1.Recipient) {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	return true
}
func (m *MsgAddLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPoolswap(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Deadline != 0 {
		i = encodeVarintPoolswap(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.QuoteAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.MaxBaseAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MinLiquidity.Size()
		i -= size
		if _, err := m.MinLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgRemoveLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPoolswap(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Deadline != 0 {
		i = encodeVarintPoolswap(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.MinQuoteAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.MinBaseAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Liquidity.Size()
		i -= size
		if _, err := m.Liquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgCreateExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPoolswap(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPoolswap(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTokenToNativeToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenToNativeToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenToNativeToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintPoolswap(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintPoolswap(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if m.Deadline != 0 {
		i = encodeVarintPoolswap(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.MinBoughtTokenAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.SoldTokenAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPoolswap(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoolswap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinLiquidity.Size()
	n += 1 + l + sovPoolswap(uint64(l))
	l = m.MaxBaseAmount.Size()
	n += 1 + l + sovPoolswap(uint64(l))
	l = m.QuoteAmount.Size()
	n += 1 + l + sovPoolswap(uint64(l))
	if m.Deadline != 0 {
		n += 1 + sovPoolswap(uint64(m.Deadline))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPoolswap(uint64(l))
	}
	return n
}

func (m *MsgRemoveLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Liquidity.Size()
	n += 1 + l + sovPoolswap(uint64(l))
	l = m.MinBaseAmount.Size()
	n += 1 + l + sovPoolswap(uint64(l))
	l = m.MinQuoteAmount.Size()
	n += 1 + l + sovPoolswap(uint64(l))
	if m.Deadline != 0 {
		n += 1 + sovPoolswap(uint64(m.Deadline))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPoolswap(uint64(l))
	}
	return n
}

func (m *MsgCreateExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPoolswap(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPoolswap(uint64(l))
	}
	return n
}

func (m *MsgTokenToNativeToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SoldTokenAmount.Size()
	n += 1 + l + sovPoolswap(uint64(l))
	l = m.MinBoughtTokenAmount.Size()
	n += 1 + l + sovPoolswap(uint64(l))
	if m.Deadline != 0 {
		n += 1 + sovPoolswap(uint64(m.Deadline))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovPoolswap(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPoolswap(uint64(l))
	}
	return n
}

func sovPoolswap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoolswap(x uint64) (n int) {
	return sovPoolswap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolswap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBaseAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBaseAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QuoteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolswap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolswap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoolswap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolswap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBaseAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBaseAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinQuoteAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinQuoteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolswap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolswap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoolswap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolswap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolswap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolswap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoolswap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenToNativeToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolswap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenToNativeToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenToNativeToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldTokenAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SoldTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBoughtTokenAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBoughtTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolswap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolswap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoolswap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoolswap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolswap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolswap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolswap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoolswap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoolswap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoolswap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoolswap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolswap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoolswap = fmt.Errorf("proto: unexpected end of group")
)
